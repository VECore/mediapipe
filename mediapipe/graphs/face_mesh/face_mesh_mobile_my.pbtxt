# MediaPipe graph that performs face mesh with TensorFlow Lite on GPU.

# GPU buffer. (GpuBuffer)
input_stream: "input_video"

# Max number of faces to detect/process. (int)
input_side_packet: "num_faces"
input_side_packet: "gpu_origin"  

# Collection of detected/processed faces, each represented as a list of
# landmarks. (std::vector<NormalizedLandmarkList>)
output_stream: "multi_face_landmarks"

# Extra outputs (for debugging, for instance).
# Detected faces. (std::vector<Detection>)
output_stream: "face_detections"
# Regions of interest calculated based on landmarks.
# (std::vector<NormalizedRect>)
output_stream: "face_rects_from_landmarks"
# Regions of interest calculated based on face detections.
# (std::vector<NormalizedRect>)
output_stream: "face_rects_from_detections"

output_stream: "landmark_presence"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:landmark_presence"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontGpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "gpu_origin"  
  output_stream: "LANDMARKS:multi_face_landmarks"
  output_stream: "ROIS_FROM_LANDMARKS:face_rects_from_landmarks"
  output_stream: "DETECTIONS:face_detections"
  output_stream: "ROIS_FROM_DETECTIONS:face_rects_from_detections"
}

# # Calculate size of the image.
# node {
#   calculator: "ImagePropertiesCalculator"
#   input_stream: "IMAGE_GPU:throttled_input_video"
#   output_stream: "SIZE:image_size"
# }

# # Extracts a single set of face landmarks associated with the most prominent
# # face detected from a collection.
# node {
#   calculator: "SplitNormalizedLandmarkListVectorCalculator"
#   input_stream: "multi_face_landmarks"
#   output_stream: "face_landmarks"
#   node_options: {
#     [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
#       ranges: { begin: 0 end: 1 }
#       element_only: true
#     }
#   }
# }

# # Applies smoothing to a face landmark list. The filter options were handpicked
# # to achieve better visual results.
# node {
#   calculator: "LandmarksSmoothingCalculator"
#   input_stream: "NORM_LANDMARKS:face_landmarks"
#   input_stream: "IMAGE_SIZE:image_size"
#   output_stream: "NORM_FILTERED_LANDMARKS:filtered_landmarks"
#   node_options: {
#     [type.googleapis.com/mediapipe.LandmarksSmoothingCalculatorOptions] {
#       velocity_filter: {
#         window_size: 5
#         velocity_scale: 20.0
#       }
#     }
#   }
# }

# add PacketPresenceCalculator
node {
  calculator: "PacketPresenceCalculator"
  input_stream: "PACKET:multi_face_landmarks"
  output_stream: "PRESENCE:landmark_presence"
}